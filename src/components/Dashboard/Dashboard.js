import React, { useState, useEffect } from 'react';
import TaskList from '../Task/TaskList';
import supabase from '../../services/supabaseClient';
import './Dashboard.css';

function Dashboard() {
  const [tasks, setTasks] = useState([]);
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('all');
  const [error, setError] = useState(null);
  const [motivationQuote, setMotivationQuote] = useState('');

  // Âä±„Åæ„Åó„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ„É™„Çπ„Éà
  const motivationQuotes = [
    "üåü Â∞è„Åï„Å™‰∏ÄÊ≠©„ÅåÂ§ß„Åç„Å™Â§âÂåñ„ÇíÁîü„Åø„Åæ„Åô",
    "üí™ ‰ªäÊó•„Åß„Åç„Çã„Åì„Å®„Åã„ÇâÂßã„ÇÅ„Åæ„Åó„Çá„ÅÜ",
    "üéØ ÂÆåÁíß„ÇíÁõÆÊåá„Åï„Åö„ÄÅÈÄ≤Ê≠©„ÇíÂ§ßÂàá„Å´",
    "‚ú® „ÅÇ„Å™„Åü„ÅÆ„Éö„Éº„Çπ„ÅßÂ§ß‰∏àÂ§´„Åß„Åô",
    "üöÄ ‰∏Ä„Å§„Åö„Å§Áâá‰ªò„Åë„Å¶„ÅÑ„Åë„Å∞OK",
    "üåà ‰ªäÊó•„ÇÇÈ†ëÂºµ„Å£„Å¶„ÅÑ„Çã„ÅÇ„Å™„Åü„ÅåÁ¥†Êô¥„Çâ„Åó„ÅÑ",
    "‚≠ê ÈõÜ‰∏≠Âäõ„ÅØÊ≥¢„Åå„ÅÇ„Å£„Å¶ÂΩìÁÑ∂„Åß„Åô",
    "üåª „ÇÑ„ÇãÊ∞ó„ÅåÂá∫„Å™„ÅÑÊó•„ÇÇ„ÅÇ„Çä„Åæ„Åô„ÄÅ„Åù„Çå„ÅßOK"
  ];

  // „Çø„Çπ„ÇØ„Å®„Ç´„ÉÜ„Ç¥„É™„ÇíÂèñÂæó
  useEffect(() => {
    fetchTasks();
    fetchCategories();
    // Âä±„Åæ„Åó„É°„ÉÉ„Çª„Éº„Ç∏„Çí„É©„É≥„ÉÄ„É†„Å´ÈÅ∏Êäû
    const randomQuote = motivationQuotes[Math.floor(Math.random() * motivationQuotes.length)];
    setMotivationQuote(randomQuote);
  }, []);

  async function fetchTasks() {
    setLoading(true);
    setError(null);

    try {
      const { data, error } = await supabase
        .from('tasks')
        .select(`
          *,
          categories(id, name, color)
        `)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('„Çø„Çπ„ÇØ„ÅÆÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error);
        setError('„Çø„Çπ„ÇØ„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Éö„Éº„Ç∏„ÇíÊõ¥Êñ∞„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      } else {
        setTasks(data || []);
        setError(null);
      }
    } catch (err) {
      console.error('‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº:', err);
      setError('Êé•Á∂ö„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
    } finally {
      setLoading(false);
    }
  }

  async function fetchCategories() {
    try {
      const { data, error } = await supabase
        .from('categories')
        .select('*')
        .order('name', { ascending: true });

      if (error) {
        console.error('„Ç´„ÉÜ„Ç¥„É™„ÅÆÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error);
      } else {
        setCategories(data || []);
      }
    } catch (err) {
      console.error('„Ç´„ÉÜ„Ç¥„É™ÂèñÂæó„Ç®„É©„Éº:', err);
    }
  }

  // „Çø„Çπ„ÇØ„ÅÆ„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
  const getFilteredTasks = () => {
    switch (activeTab) {
      case 'all':
        return tasks;
      case 'active':
        return tasks.filter(task => !task.status);
      case 'completed':
        return tasks.filter(task => task.status);
      case 'today':
        return tasks.filter(task => {
          if (!task.due_date) return false;
          const today = new Date().toDateString();
          const taskDate = new Date(task.due_date).toDateString();
          return today === taskDate && !task.status;
        });
      case 'urgent':
        return tasks.filter(task => task.priority === 'È´ò' && !task.status);
      default:
        return tasks;
    }
  };

  const filteredTasks = getFilteredTasks();
  const activeTasks = tasks.filter(task => !task.status);
  const completedTasks = tasks.filter(task => task.status);
  const todaysTasks = tasks.filter(task => {
    if (!task.due_date) return false;
    const today = new Date().toDateString();
    const taskDate = new Date(task.due_date).toDateString();
    return today === taskDate && !task.status;
  });
  const urgentTasks = tasks.filter(task => task.priority === 'È´ò' && !task.status);

  // „Çø„ÉñÂàá„ÇäÊõø„ÅàÊôÇ„ÅÆ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂäπÊûú
  const TabButton = ({ tabKey, icon, label, count, isActive, onClick, color = '#6b7280' }) => (
    <button
      onClick={() => onClick(tabKey)}
      className={`tab-button ${isActive ? 'active' : ''}`}
      style={{
        borderColor: isActive ? color : 'transparent',
        color: isActive ? color : '#6b7280'
      }}
    >
      <span className="tab-icon">{icon}</span>
      <span className="tab-label">{label}</span>
      <span className="tab-count" style={{ backgroundColor: isActive ? color : '#e5e7eb' }}>
        {count}
      </span>
    </button>
  );

  return (
    <div className="dashboard-container">
      {/* „Éò„ÉÉ„ÉÄ„Éº */}
      <header className="dashboard-header">
        <div className="header-content">
          <div className="header-title-section">
            <h1 className="dashboard-title">‚ú® „Çø„Çπ„ÇØÁÆ°ÁêÜ</h1>
            <p className="dashboard-subtitle">{motivationQuote}</p>
          </div>
          
          {/* ÊôÇÂàªË°®Á§∫ */}
          <div className="header-time">
            <div className="current-time">
              {new Date().toLocaleTimeString('ja-JP', { 
                hour: '2-digit', 
                minute: '2-digit' 
              })}
            </div>
            <div className="current-date">
              {new Date().toLocaleDateString('ja-JP', { 
                month: 'long', 
                day: 'numeric',
                weekday: 'short' 
              })}
            </div>
          </div>
        </div>
      </header>

      {/* „Ç®„É©„ÉºË°®Á§∫ */}
      {error && (
        <div className="error-banner">
          <div className="error-content">
            <span className="error-icon">‚ö†Ô∏è</span>
            <span className="error-message">{error}</span>
            <button 
              onClick={() => {
                fetchTasks();
                fetchCategories();
              }}
              className="retry-button"
            >
              üîÑ ÂÜçË©¶Ë°å
            </button>
          </div>
        </div>
      )}

      {/* „Çø„Éñ„Ç≥„É≥„Éà„É≠„Éº„É´ */}
      <div className="dashboard-controls">
        <div className="tab-controls">
          <TabButton
            tabKey="all"
            icon="üìã"
            label="„Åô„Åπ„Å¶"
            count={tasks.length}
            isActive={activeTab === 'all'}
            onClick={setActiveTab}
            color="#374151"
          />
          
          <TabButton
            tabKey="active"
            icon="‚ö°"
            label="Êú™ÂÆå‰∫Ü"
            count={activeTasks.length}
            isActive={activeTab === 'active'}
            onClick={setActiveTab}
            color="#3b82f6"
          />
          
          <TabButton
            tabKey="today"
            icon="üìÖ"
            label="‰ªäÊó•"
            count={todaysTasks.length}
            isActive={activeTab === 'today'}
            onClick={setActiveTab}
            color="#f59e0b"
          />
          
          <TabButton
            tabKey="urgent"
            icon="üî•"
            label="Á∑äÊÄ•"
            count={urgentTasks.length}
            isActive={activeTab === 'urgent'}
            onClick={setActiveTab}
            color="#dc2626"
          />
          
          <TabButton
            tabKey="completed"
            icon="‚úÖ"
            label="ÂÆå‰∫Ü"
            count={completedTasks.length}
            isActive={activeTab === 'completed'}
            onClick={setActiveTab}
            color="#10b981"
          />
        </div>
      </div>

      {/* „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
      <div className={`main-content ${loading ? 'loading' : ''}`}>
        <TaskList
          tasks={filteredTasks}
          categories={categories}
          loading={loading}
          refreshTasks={fetchTasks}
          activeTab={activeTab}
        />
      </div>

      {/* „Éï„ÉÉ„Çø„Éº */}
      <footer className="dashboard-footer">
        <div className="footer-content">
          <div className="focus-tip">
            üí° <strong>ÈõÜ‰∏≠„ÅÆ„Ç≥„ÉÑ:</strong> ‰∏ÄÂ∫¶„Å´‰∏Ä„Å§„ÅÆ„Çø„Çπ„ÇØ„Å´ÈõÜ‰∏≠„Åó„Åæ„Åó„Çá„ÅÜ
          </div>
          <div className="app-version">
            ADHD„Éï„É¨„É≥„Éâ„É™„ÉºË®≠Ë®à v2.0
          </div>
        </div>
      </footer>
    </div>
  );
}

export default Dashboard;